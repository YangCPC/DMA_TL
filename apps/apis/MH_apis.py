import binascii
import random
from datetime import datetime

from flask import Blueprint, abort, jsonify
from flask_restful import Api, Resource, reqparse, fields, marshal, marshal_with

from apps.models.MH_models import MHSecureCommunicationWithCEParams
from apps.utils.crypto import H2_hash_function, SymmetricEncryption, nonce_generation
from exts import db

MH_bp = Blueprint('MH', __name__, url_prefix='/mh')
api = Api(MH_bp)

@MH_bp.route('/')
def index():
    return 'hello'

@MH_bp.errorhandler(400)
def custom400(error):
    response = jsonify({'message': error.description})

class ContentDecode(fields.Raw):
    def format(self, value):
        return binascii.hexlify(value).decode('utf-8')

obj_fields = {
    'id': fields.Integer,
    't2': fields.String,
    'DMi': fields.Integer,
    'H2': fields.String,
    'c2': ContentDecode(attribute='c2'),
    'm2': fields.String
}

class ParamInfoApi(Resource):
    @marshal_with(obj_fields)
    def get(self, id):
        obj = MHSecureCommunicationWithCEParams.query.get(id)

        return obj


MH_parser = reqparse.RequestParser()
MH_parser.add_argument('DMi',
                       type=int,
                       location=['args', 'form'])
MH_parser.add_argument('Flag',
                       type=str,
                       required=True,
                       help='Must provide the Flag',
                       location=['args', 'form'])
MH_parser.add_argument('r1',
                       type=str,
                       location=['args', 'form'])
MH_parser.add_argument('t2',
                       type=str,
                       location=['args', 'form'])

class MHSecureCommunicationWithCEApi(Resource):
    def get(self):
        pass

    def post(self):
        args = MH_parser.parse_args()
        flag = args.get('Flag')

        # flag == "0", MH will send c2 to CE
        if flag == "0":
            # the nonce
            # nonce = nonce_generation()
            nonce = 'ymNIaotdN3EQPMHpl+gZTkhYNQqGu7eHUG+MBAIbfOE='

            # generate a random number r1
            r1 = random.randint(1, 1000)
            # obtain the time stamp t2
            t2 = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
            # get the DMi from the request
            DMi = args.get('DMi')

            if not DMi:
                abort(400, 'Please provide the DMi')

            temp = str(r1) + t2 + str(DMi)
            # call H2 function
            H2 = H2_hash_function(temp)
            # generate a message m2
            m2 = str(r1) + ' ' + t2 + ' ' + str(DMi) + ' ' + H2
            # obtain c2
            encryptor = SymmetricEncryption()
            c2 = encryptor.encryption(m2, nonce)

            # Create an instance for MHSecureCommunicationWithCEParams
            params = MHSecureCommunicationWithCEParams()
            params.r1 = r1
            params.t2 = t2
            params.DMi = DMi
            params.H2 = H2
            params.m2 = m2
            # params.c2 = binascii.hexlify(c2).decode('utf-8')
            params.c2 = c2
            # Storage the params into the db
            db.session.add(params)
            db.session.commit()

            data = {
                "status": 200,
                "msg": "c2 has been generated by MH.",
                "c2": binascii.hexlify(c2).decode('utf-8'),
            }

            return data

        # flag == "1", MH will receive (r1, t2)
        # and then double check whether these params comes from the corresponding CE.
        if flag == "1":
            r1 = args.get('r1')
            t2 = args.get('t2')
            print("r1: ", r1)
            print("t2: ", t2)


            if (MHSecureCommunicationWithCEParams.query.filter(MHSecureCommunicationWithCEParams.r1 == int(r1)).all() and
                MHSecureCommunicationWithCEParams.query.filter(MHSecureCommunicationWithCEParams.t2 == t2).all() ):
                return jsonify(msg='Verification phase is successful.')
            else:
                return jsonify(msg='Auth is failed.')


api.add_resource(ParamInfoApi, '/info/<int:id>')
api.add_resource(MHSecureCommunicationWithCEApi, '/MH2CE')